-- Database: adrs

-- DROP DATABASE adrs;

-- CREATE DATABASE adrs
--     WITH 
--     OWNER = oi_admin
--     ENCODING = 'UTF8'
--     LC_COLLATE = 'en_US.UTF-8'
--     LC_CTYPE = 'en_US.UTF-8'
--     TABLESPACE = pg_default
--     CONNECTION LIMIT = -1;



-- DROP TABLE IF EXISTS submissions;
-- DROP TABLE IF EXISTS payments;
-- DROP TABLE IF EXISTS srns;
-- DROP TABLE IF EXISTS decisions;
-- DROP TABLE IF EXISTS adrs;
-- DROP TABLE IF EXISTS facilities;
-- DROP TABLE IF EXISTS patients;
-- DROP TABLE IF EXISTS auditors;
	
CREATE TABLE IF NOT EXISTS facilities (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	global_id INTEGER NOT NULL,
	facility_id INTEGER NOT NULL,
	facility_name CHAR(255) NOT NULL,
	division CHAR(255) NOT NULL,
	operating_group CHAR(255) NOT NULL,
	region CHAR(255) NOT NULL,
	billing_group CHAR(255) NOT NULL,
	mac CHAR(255) NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS patients (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	mrn INTEGER NOT NULL,
	last_name CHAR(255) NOT NULL,
	first_name CHAR(255) NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS auditors (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	auditor CHAR(255) NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS adrs (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	from_date DATE NOT NULL,
	to_date DATE NOT NULL,
	global_id INTEGER NOT NULL,
	mrn INTEGER NOT NULL,
	expected_reimbursement NUMERIC(8,2) NOT NULL,
	expected_reimbursement_80 NUMERIC(8,2),
	active BOOLEAN NOT NULL,
	mcr_status CHAR(63) NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS decisions (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	adr_id INTEGER NOT NULL REFERENCES adrs(id),
	stage CHAR(255) NOT NULL,
	decision CHAR(255) NOT NULL,
	date DATE NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
	
CREATE TABLE IF NOT EXISTS srns (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	srn CHAR(255) UNIQUE NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS payments (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	srn CHAR(255) REFERENCES srns(srn),
	amount NUMERIC(8,2) NOT NULL,
	date DATE NOT NULL,
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS submissions (
	id INTEGER UNIQUE PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
	adr_id INTEGER NOT NULL REFERENCES adrs(id),
	stage CHAR(255) NOT NULL,
	date DATE NOT NULL,
	auditor CHAR(255),
	updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
	created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
	
	
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
	RETURNS TRIGGER
AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$	LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON facilities
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();
	
CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON patients
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();

CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON auditors
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();
	
CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON adrs
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();
	
CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON decisions
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();	
	
CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON srns
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();	
	
CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON payments
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();	
	
CREATE TRIGGER set_timestamp
	BEFORE UPDATE ON submissions
	FOR EACH ROW
	EXECUTE PROCEDURE trigger_set_timestamp();	